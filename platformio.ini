; ESP32 Matrix Portal S3 - PlatformIO Project Configuration
; --------------------------------------------------------------------------------
;
; @file platformio.ini
; @brief Production-ready PlatformIO configuration for ESP32 Matrix Portal S3
; 
; @doc This configuration file defines the build environment for the ESP32 
; Matrix Portal S3 LED matrix display project. It includes optimized settings
; for both development and production builds across different platforms.
;
; Key Features:
; - ESP32-S3 with PSRAM support for large displays
; - Optimized compiler flags for performance and stability
; - Cross-platform compatibility (Windows/macOS)
; - Advanced warning suppression for clean builds
; - Memory optimization for LED matrix operations
; - Integrated debugging and monitoring tools
;
; Hardware Target: Adafruit Matrix Portal ESP32-S3
; Display: 64x64 RGB LED Matrix Panel
; Memory: ESP32-S3 with PSRAM enabled
; Flash: LittleFS filesystem for configuration storage
;
; @version 1.0
; @date 2025-01-12
; @author Denny Kim, Feature Lead : ESP32 Matrix Portal S3 Team
; --------------------------------------------------------------------------------

[platformio]
; Default build environment - optimized for macOS development
default_envs = matrixportal_s3_mac

; Project description displayed in PlatformIO IDE
description = Adafruit Matrix Portal S3 with 64x64 LED Matrix

; SHARED ENVIRONMENT CONFIGURATION
; --------------------------------------------------------------------------------

[common_env_settings]
; Hardware platform configuration
platform = espressif32              ; ESP32 platform with Arduino framework support
board = adafruit_matrixportal_esp32s3 ; Adafruit Matrix Portal ESP32-S3 board definition
framework = arduino                  ; Arduino framework for familiar development environment

; Partition and filesystem configuration
board_build.partitions = default.csv ; ESP32 partition table for app/OTA/SPIFFS/NVS
board_build.filesystem = littlefs   ; LittleFS for reliable file operations and wear leveling

; Static analysis and code quality tools
check_tool = cppcheck, clangtidy     ; Enable both static analysis tools
check_flags = 
	cppcheck: --enable=all --std=c++17  ; Full C++17 analysis with all checks enabled
	clangtidy: --checks=*                ; Enable all available clang-tidy checks

; LIBRARY DEPENDENCIES
; --------------------------------------------------------------------------------
; @doc Carefully selected library versions for stability and compatibility
; All versions are pinned to ensure reproducible builds across environments
; - Core libraries for LED MATRIX is 'ESP32-HUB75_MatrixPanel-DMA' in /lib which is 
;   included in the Adafruit Matrix Portal S3 board definition
; - LittleFS filesystem is used for configuration storage and is built-in with ESP32 platform
; - Network libraries for MQTT and JSON are 'PubSubClient' and 'ArduinoJson'
; - Sensor libraries for accelerometer support are 'Adafruit LIS3DH' and 'Adafruit Unified Sensor'
; - IR commands library is 'Yahboom_IR' in /lib which is included customed 'NEC' protocols

lib_deps = 
    bblanchon/ArduinoJson@6.21.3            ; JSON parsing/generation for MQTT and config
    knolleary/PubSubClient@2.8              ; MQTT client library for IoT communication
    adafruit/Adafruit GFX Library@^1.11.9   ; Core graphics library for display operations
    adafruit/Adafruit BusIO@1.14.1          ; I2C/SPI communication abstraction layer
    fastled/FastLED@^3.9.0                  ; High-performance LED control library
    adafruit/Adafruit LIS3DH@1.2.4          ; 3-axis accelerometer support (if available)
    adafruit/Adafruit Unified Sensor@1.1.9  ; Unified sensor driver interface
    bitbank2/AnimatedGIF @ ^2.2.0           ; Optimized GIF animation and image decoder
    bitbank2/PNGdec @ ^1.1.3                ; Efficient PNG image decoder

; COMPILER AND BUILD CONFIGURATION
; --------------------------------------------------------------------------------
; @doc Production-optimized build flags for performance, stability, and compatibility

build_flags = 
    ; Warning control for clean builds
    -Wno-sign-compare                    ; Suppress signed/unsigned comparison warnings
    -Wno-unknown-pragmas                 ; Suppress unknown pragma warnings from FastLED
    
    ; Network and connectivity configuration
    -DWIFI_RSSI_THRESHOLD=-70            ; WiFi signal strength threshold for connection
    
    ; Debugging and logging configuration
    -DCORE_DEBUG_LEVEL=4                 ; ESP32 core debug level (0=None, 5=Verbose)
    
    ; Memory management - ESP32-S3 PSRAM optimization
    -DBOARD_HAS_PSRAM                    ; Enable PSRAM support for large displays
    -DCONFIG_SPIRAM_SUPPORT=1            ; Enable external SPI RAM support
    -DCONFIG_SPIRAM_USE_MALLOC=1         ; Use PSRAM for malloc operations
    -DCONFIG_SPIRAM_USE_CAPS_ALLOC=1     ; Enable capability-aware memory allocation
    
    ; LED library optimization
    -DFASTLED_ESP32_USE_RMT=1            ; Use ESP32 RMT peripheral for precise timing
    
    ; Media library debugging
    -DANIMATEDGIF_DEBUG=1                ; Enable AnimatedGIF library debug output
    
    ; Additional optimization notes:
    ; - PSRAM settings enable large frame buffers for 64x64+ displays
    ; - RMT usage ensures precise LED timing without interference
    ; - Debug levels can be reduced to 0-2 for production builds

; BUILD AUTOMATION AND TOOLING
; --------------------------------------------------------------------------------

; Pre-build script to update version information automatically
extra_scripts = pre:tools/update_version.py

; UPLOAD AND FLASHING CONFIGURATION
; --------------------------------------------------------------------------------
; @doc Optimized settings for reliable ESP32-S3 firmware uploads

; Upload configuration for ESP32-S3
upload_flags = 
    --chip esp32s3                       ; Specify ESP32-S3 chip explicitly
    --before = nodemcu                   ; Reset method before flashing (compatible mode)
    --after = hard_reset                 ; Hard reset after flashing for clean boot

; Upload speed - balance between speed and reliability
upload_speed = 460800                    ; 460.8 kbps - optimal for most USB connections

; SERIAL MONITORING CONFIGURATION
; --------------------------------------------------------------------------------
; @doc Development and debugging settings for serial communication

monitor_speed = 115200                   ; Standard baud rate for serial communication
monitor_filters = esp32_exception_decoder ; Automatic stack trace decoding for debugging
monitor_rts = 0                          ; Disable RTS flow control
monitor_dtr = 0                          ; Disable DTR flow control

; ENVIRONMENT DEFINITIONS
; --------------------------------------------------------------------------------

; Windows Development Environment
; --------------------------------------------------------------------------------
; @doc Optimized build environment for Windows development systems
; Inherits all common settings with Windows-specific optimizations

[env:matrixportal_s3_win]
platform = ${common_env_settings.platform}
board = ${common_env_settings.board}
framework = ${common_env_settings.framework}
monitor_speed = ${common_env_settings.monitor_speed}
board_build.partitions = ${common_env_settings.board_build.partitions}
board_build.filesystem = ${common_env_settings.board_build.filesystem}
lib_deps = ${common_env_settings.lib_deps}
build_flags = ${common_env_settings.build_flags}

; Windows-specific notes:
; - Ensure COM port drivers are installed for ESP32-S3
; - Windows Defender may interfere with upload process
; - Use Device Manager to verify correct COM port assignment

; macOS Development Environment  
; --------------------------------------------------------------------------------
; @doc Optimized build environment for macOS development systems
; Includes additional upload speed optimization for macOS systems

[env:matrixportal_s3_mac]
platform = ${common_env_settings.platform}
board = ${common_env_settings.board}
framework = ${common_env_settings.framework}
board_build.partitions = ${common_env_settings.board_build.partitions}
board_build.filesystem = ${common_env_settings.board_build.filesystem}
lib_deps = ${common_env_settings.lib_deps}
build_flags = ${common_env_settings.build_flags}
monitor_speed = ${common_env_settings.monitor_speed}
upload_speed = ${common_env_settings.upload_speed}

; macOS-specific notes:
; - USB-C to USB-A adapters may affect upload reliability
; - Terminal.app or iTerm2 recommended for serial monitoring
; - Xcode command line tools required for optimal compilation
; - Consider using higher upload speeds (921600) if connection is stable

; PRODUCTION BUILD RECOMMENDATIONS
; --------------------------------------------------------------------------------
; 
; For production deployments, consider these modifications:
; 
; 1. Reduce debug output:
;    -DCORE_DEBUG_LEVEL=0 or -DCORE_DEBUG_LEVEL=1
; 
; 2. Disable library debugging:
;    Remove -DANIMATEDGIF_DEBUG=1
; 
; 3. Enable compiler optimizations:
;    Add -O2 or -Os for size optimization
; 
; 4. Consider watchdog timer:
;    Add -DCONFIG_ESP_TASK_WDT_TIMEOUT_S=10
; 
; 5. Optimize partition table:
;    Use custom partition table for specific memory requirements
; 
; Example production build_flags:
; build_flags = 
;     -Os                              ; Size optimization
;     -DCORE_DEBUG_LEVEL=1             ; Minimal debug output
;     -DBOARD_HAS_PSRAM
;     -DCONFIG_SPIRAM_SUPPORT=1
;     -DCONFIG_SPIRAM_USE_MALLOC=1
;     -DCONFIG_SPIRAM_USE_CAPS_ALLOC=1
;     -DFASTLED_ESP32_USE_RMT=1
;     -DCONFIG_ESP_TASK_WDT_TIMEOUT_S=10
; --------------------------------------------------------------------------------
